generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  Usu√°rios    //
model User {
  id                String    @id @default(uuid())
  firstName         String
  lastName          String
  userName          String    @unique
  email             String    @unique
  avatar            String?
  password          String
  passwordChangedAt String?
  role              userRole  @default(USER)
  active            Boolean   @default(true)
  verified          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  bookings          Booking[]
  reviews           Review[]
  hotel             Hotel[]
}

enum userRole {
  USER
  ADMIN
}

//    Hoteis    //
model Hotel {
  id            String   @id @default(uuid())
  name          String
  rating        Int?     @default(0)
  summary       String
  description   String
  thumbnail     String
  images        String[]
  logo          String
  slug          String
  latitude      Float
  longitude     Float
  address       String
  zipCode       String
  addressNumber String
  room          Room[]
  admin         User     @relation(fields: [userId], references: [id])
  userId        String
}

//    Quartos   //
model Room {
  id          String    @id @default(uuid())
  name        String
  summary     String
  thumbnail   String
  description String
  images      String[]
  price       Float
  rating      Int       @default(0)
  hotelId     String?
  hotel       Hotel?    @relation(fields: [hotelId], references: [id])
  bookings    Booking[]
  Review      Review[]
}

//    Reservas    //
model Booking {
  id          String   @id @default(uuid())
  price       Float
  paid        Boolean
  bookingDate DateTime @default(now())
  dateIn      DateTime
  dateOut     DateTime
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  room        Room?    @relation(fields: [roomId], references: [id])
  roomId      String?
}

//    Reviews    //
model Review {
  id     String  @id @default(uuid())
  review String
  rating Int
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  room   Room    @relation(fields: [roomId], references: [id])
  roomId String
}
